Author: Kevin Chevreuil - Kaisen <kaisen@kaisenlinux.org>

--- helm-3.12.2.orig/cmd/helm/version.go
+++ helm-3.12.2/cmd/helm/version.go
@@ -33,7 +33,7 @@ Show the version for Helm.
 This will print a representation the version of Helm.
 The output will look something like this:
 
-version.BuildInfo{Version:"v3.2.1", GitCommit:"fe51cd1e31e6a202cba7dead9552a6d418ded79a", GitTreeState:"clean", GoVersion:"go1.13.10"}
+version.BuildInfo{Version:"v3.2.1", GoVersion:"go1.13.10"}
 
 - Version is the semantic version of the release.
 - GitCommit is the SHA for the commit that this version was built from.
@@ -94,9 +94,6 @@ func (o *versionOptions) run(out io.Writ
 func formatVersion(short bool) string {
 	v := version.Get()
 	if short {
-		if len(v.GitCommit) >= 7 {
-			return fmt.Sprintf("%s+g%s", v.Version, v.GitCommit[:7])
-		}
 		return version.GetVersion()
 	}
 	return fmt.Sprintf("%#v", v)
--- helm-3.12.2.orig/internal/version/version.go
+++ helm-3.12.2/internal/version/version.go
@@ -34,9 +34,9 @@ var (
 	// metadata is extra build time data
 	metadata = ""
 	// gitCommit is the git sha1
-	gitCommit = ""
+//	gitCommit = ""
 	// gitTreeState is the state of the git tree
-	gitTreeState = ""
+//	gitTreeState = ""
 )
 
 // BuildInfo describes the compile time information.
@@ -44,9 +44,9 @@ type BuildInfo struct {
 	// Version is the current semver.
 	Version string `json:"version,omitempty"`
 	// GitCommit is the git sha1.
-	GitCommit string `json:"git_commit,omitempty"`
+//	GitCommit string `json:"git_commit,omitempty"`
 	// GitTreeState is the state of the git tree.
-	GitTreeState string `json:"git_tree_state,omitempty"`
+//	GitTreeState string `json:"git_tree_state,omitempty"`
 	// GoVersion is the version of the Go compiler used.
 	GoVersion string `json:"go_version,omitempty"`
 }
@@ -68,8 +68,8 @@ func GetUserAgent() string {
 func Get() BuildInfo {
 	v := BuildInfo{
 		Version:      GetVersion(),
-		GitCommit:    gitCommit,
-		GitTreeState: gitTreeState,
+//		GitCommit:    gitCommit,
+//		GitTreeState: gitTreeState,
 		GoVersion:    runtime.Version(),
 	}
 
